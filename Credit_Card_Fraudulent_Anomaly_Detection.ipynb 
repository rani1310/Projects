{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWELcdzg3yXeTK5pSG/g+M",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rani1310/Projects/blob/main/Credit_Card_Fraudulent_Anomaly_Detection.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "pbjxJGSY5_Hg"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Data = (\"/content/creditcard.csv\")\n",
        "\n",
        "DataFrame = pd.read_csv(Data)####import data"
      ],
      "metadata": {
        "id": "a_cdikzb6MQz"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DataFrame.head()#####this will give glimpse or view of data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "G70no5xsA7-a",
        "outputId": "dc582bf7-6692-43c9-ff7c-a49cd3f0302e"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
              "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
              "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
              "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
              "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
              "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
              "\n",
              "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
              "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
              "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
              "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
              "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
              "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
              "\n",
              "        V26       V27       V28  Amount  Class  \n",
              "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
              "1  0.125895 -0.008983  0.014724    2.69      0  \n",
              "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
              "3 -0.221929  0.062723  0.061458  123.50      0  \n",
              "4  0.502292  0.219422  0.215153   69.99      0  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bda34221-4c7b-4be9-854d-8fa4e9992d22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>149.62</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>378.66</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>123.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>69.99</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bda34221-4c7b-4be9-854d-8fa4e9992d22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bda34221-4c7b-4be9-854d-8fa4e9992d22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bda34221-4c7b-4be9-854d-8fa4e9992d22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d8270bfa-03e7-4f57-9a9e-f574e804e884\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8270bfa-03e7-4f57-9a9e-f574e804e884')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d8270bfa-03e7-4f57-9a9e-f574e804e884 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "DataFrame"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##To filter the fraud and non fraud data we are going to segregate values using loc or locate function\n",
        "\n",
        "Fraud= DataFrame.loc[DataFrame.Class == 1]##fraud class\n",
        "Non_Fraud= DataFrame.loc[DataFrame.Class == 0]  ##Non Fraud class\n",
        "Fraud###Print\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "xqofcoveCeml",
        "outputId": "96e8a052-8f8a-4bcb-fe8b-d87c851767a6"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Time        V1        V2        V3        V4        V5        V6  \\\n",
              "541        406.0 -2.312227  1.951992 -1.609851  3.997906 -0.522188 -1.426545   \n",
              "623        472.0 -3.043541 -3.157307  1.088463  2.288644  1.359805 -1.064823   \n",
              "4920      4462.0 -2.303350  1.759247 -0.359745  2.330243 -0.821628 -0.075788   \n",
              "6108      6986.0 -4.397974  1.358367 -2.592844  2.679787 -1.128131 -1.706536   \n",
              "6329      7519.0  1.234235  3.019740 -4.304597  4.732795  3.624201 -1.357746   \n",
              "...          ...       ...       ...       ...       ...       ...       ...   \n",
              "279863  169142.0 -1.927883  1.125653 -4.518331  1.749293 -1.566487 -2.010494   \n",
              "280143  169347.0  1.378559  1.289381 -5.004247  1.411850  0.442581 -1.326536   \n",
              "280149  169351.0 -0.676143  1.126366 -2.213700  0.468308 -1.120541 -0.003346   \n",
              "281144  169966.0 -3.113832  0.585864 -5.399730  1.817092 -0.840618 -2.943548   \n",
              "281674  170348.0  1.991976  0.158476 -2.583441  0.408670  1.151147 -0.096695   \n",
              "\n",
              "              V7        V8        V9  ...       V21       V22       V23  \\\n",
              "541    -2.537387  1.391657 -2.770089  ...  0.517232 -0.035049 -0.465211   \n",
              "623     0.325574 -0.067794 -0.270953  ...  0.661696  0.435477  1.375966   \n",
              "4920    0.562320 -0.399147 -0.238253  ... -0.294166 -0.932391  0.172726   \n",
              "6108   -3.496197 -0.248778 -0.247768  ...  0.573574  0.176968 -0.436207   \n",
              "6329    1.713445 -0.496358 -1.282858  ... -0.379068 -0.704181 -0.656805   \n",
              "...          ...       ...       ...  ...       ...       ...       ...   \n",
              "279863 -0.882850  0.697211 -2.064945  ...  0.778584 -0.319189  0.639419   \n",
              "280143 -1.413170  0.248525 -1.127396  ...  0.370612  0.028234 -0.145640   \n",
              "280149 -2.234739  1.210158 -0.652250  ...  0.751826  0.834108  0.190944   \n",
              "281144 -2.208002  1.058733 -1.632333  ...  0.583276 -0.269209 -0.456108   \n",
              "281674  0.223050 -0.068384  0.577829  ... -0.164350 -0.295135 -0.072173   \n",
              "\n",
              "             V24       V25       V26       V27       V28  Amount  Class  \n",
              "541     0.320198  0.044519  0.177840  0.261145 -0.143276    0.00      1  \n",
              "623    -0.293803  0.279798 -0.145362 -0.252773  0.035764  529.00      1  \n",
              "4920   -0.087330 -0.156114 -0.542628  0.039566 -0.153029  239.93      1  \n",
              "6108   -0.053502  0.252405 -0.657488 -0.827136  0.849573   59.00      1  \n",
              "6329   -1.632653  1.488901  0.566797 -0.010016  0.146793    1.00      1  \n",
              "...          ...       ...       ...       ...       ...     ...    ...  \n",
              "279863 -0.294885  0.537503  0.788395  0.292680  0.147968  390.00      1  \n",
              "280143 -0.081049  0.521875  0.739467  0.389152  0.186637    0.76      1  \n",
              "280149  0.032070 -0.739695  0.471111  0.385107  0.194361   77.89      1  \n",
              "281144 -0.183659 -0.328168  0.606116  0.884876 -0.253700  245.00      1  \n",
              "281674 -0.450261  0.313267 -0.289617  0.002988 -0.015309   42.53      1  \n",
              "\n",
              "[492 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1309a911-099f-4ab8-9e37-09c635b504ab\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>541</th>\n",
              "      <td>406.0</td>\n",
              "      <td>-2.312227</td>\n",
              "      <td>1.951992</td>\n",
              "      <td>-1.609851</td>\n",
              "      <td>3.997906</td>\n",
              "      <td>-0.522188</td>\n",
              "      <td>-1.426545</td>\n",
              "      <td>-2.537387</td>\n",
              "      <td>1.391657</td>\n",
              "      <td>-2.770089</td>\n",
              "      <td>...</td>\n",
              "      <td>0.517232</td>\n",
              "      <td>-0.035049</td>\n",
              "      <td>-0.465211</td>\n",
              "      <td>0.320198</td>\n",
              "      <td>0.044519</td>\n",
              "      <td>0.177840</td>\n",
              "      <td>0.261145</td>\n",
              "      <td>-0.143276</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>623</th>\n",
              "      <td>472.0</td>\n",
              "      <td>-3.043541</td>\n",
              "      <td>-3.157307</td>\n",
              "      <td>1.088463</td>\n",
              "      <td>2.288644</td>\n",
              "      <td>1.359805</td>\n",
              "      <td>-1.064823</td>\n",
              "      <td>0.325574</td>\n",
              "      <td>-0.067794</td>\n",
              "      <td>-0.270953</td>\n",
              "      <td>...</td>\n",
              "      <td>0.661696</td>\n",
              "      <td>0.435477</td>\n",
              "      <td>1.375966</td>\n",
              "      <td>-0.293803</td>\n",
              "      <td>0.279798</td>\n",
              "      <td>-0.145362</td>\n",
              "      <td>-0.252773</td>\n",
              "      <td>0.035764</td>\n",
              "      <td>529.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4920</th>\n",
              "      <td>4462.0</td>\n",
              "      <td>-2.303350</td>\n",
              "      <td>1.759247</td>\n",
              "      <td>-0.359745</td>\n",
              "      <td>2.330243</td>\n",
              "      <td>-0.821628</td>\n",
              "      <td>-0.075788</td>\n",
              "      <td>0.562320</td>\n",
              "      <td>-0.399147</td>\n",
              "      <td>-0.238253</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.294166</td>\n",
              "      <td>-0.932391</td>\n",
              "      <td>0.172726</td>\n",
              "      <td>-0.087330</td>\n",
              "      <td>-0.156114</td>\n",
              "      <td>-0.542628</td>\n",
              "      <td>0.039566</td>\n",
              "      <td>-0.153029</td>\n",
              "      <td>239.93</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6108</th>\n",
              "      <td>6986.0</td>\n",
              "      <td>-4.397974</td>\n",
              "      <td>1.358367</td>\n",
              "      <td>-2.592844</td>\n",
              "      <td>2.679787</td>\n",
              "      <td>-1.128131</td>\n",
              "      <td>-1.706536</td>\n",
              "      <td>-3.496197</td>\n",
              "      <td>-0.248778</td>\n",
              "      <td>-0.247768</td>\n",
              "      <td>...</td>\n",
              "      <td>0.573574</td>\n",
              "      <td>0.176968</td>\n",
              "      <td>-0.436207</td>\n",
              "      <td>-0.053502</td>\n",
              "      <td>0.252405</td>\n",
              "      <td>-0.657488</td>\n",
              "      <td>-0.827136</td>\n",
              "      <td>0.849573</td>\n",
              "      <td>59.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6329</th>\n",
              "      <td>7519.0</td>\n",
              "      <td>1.234235</td>\n",
              "      <td>3.019740</td>\n",
              "      <td>-4.304597</td>\n",
              "      <td>4.732795</td>\n",
              "      <td>3.624201</td>\n",
              "      <td>-1.357746</td>\n",
              "      <td>1.713445</td>\n",
              "      <td>-0.496358</td>\n",
              "      <td>-1.282858</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.379068</td>\n",
              "      <td>-0.704181</td>\n",
              "      <td>-0.656805</td>\n",
              "      <td>-1.632653</td>\n",
              "      <td>1.488901</td>\n",
              "      <td>0.566797</td>\n",
              "      <td>-0.010016</td>\n",
              "      <td>0.146793</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>279863</th>\n",
              "      <td>169142.0</td>\n",
              "      <td>-1.927883</td>\n",
              "      <td>1.125653</td>\n",
              "      <td>-4.518331</td>\n",
              "      <td>1.749293</td>\n",
              "      <td>-1.566487</td>\n",
              "      <td>-2.010494</td>\n",
              "      <td>-0.882850</td>\n",
              "      <td>0.697211</td>\n",
              "      <td>-2.064945</td>\n",
              "      <td>...</td>\n",
              "      <td>0.778584</td>\n",
              "      <td>-0.319189</td>\n",
              "      <td>0.639419</td>\n",
              "      <td>-0.294885</td>\n",
              "      <td>0.537503</td>\n",
              "      <td>0.788395</td>\n",
              "      <td>0.292680</td>\n",
              "      <td>0.147968</td>\n",
              "      <td>390.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>280143</th>\n",
              "      <td>169347.0</td>\n",
              "      <td>1.378559</td>\n",
              "      <td>1.289381</td>\n",
              "      <td>-5.004247</td>\n",
              "      <td>1.411850</td>\n",
              "      <td>0.442581</td>\n",
              "      <td>-1.326536</td>\n",
              "      <td>-1.413170</td>\n",
              "      <td>0.248525</td>\n",
              "      <td>-1.127396</td>\n",
              "      <td>...</td>\n",
              "      <td>0.370612</td>\n",
              "      <td>0.028234</td>\n",
              "      <td>-0.145640</td>\n",
              "      <td>-0.081049</td>\n",
              "      <td>0.521875</td>\n",
              "      <td>0.739467</td>\n",
              "      <td>0.389152</td>\n",
              "      <td>0.186637</td>\n",
              "      <td>0.76</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>280149</th>\n",
              "      <td>169351.0</td>\n",
              "      <td>-0.676143</td>\n",
              "      <td>1.126366</td>\n",
              "      <td>-2.213700</td>\n",
              "      <td>0.468308</td>\n",
              "      <td>-1.120541</td>\n",
              "      <td>-0.003346</td>\n",
              "      <td>-2.234739</td>\n",
              "      <td>1.210158</td>\n",
              "      <td>-0.652250</td>\n",
              "      <td>...</td>\n",
              "      <td>0.751826</td>\n",
              "      <td>0.834108</td>\n",
              "      <td>0.190944</td>\n",
              "      <td>0.032070</td>\n",
              "      <td>-0.739695</td>\n",
              "      <td>0.471111</td>\n",
              "      <td>0.385107</td>\n",
              "      <td>0.194361</td>\n",
              "      <td>77.89</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281144</th>\n",
              "      <td>169966.0</td>\n",
              "      <td>-3.113832</td>\n",
              "      <td>0.585864</td>\n",
              "      <td>-5.399730</td>\n",
              "      <td>1.817092</td>\n",
              "      <td>-0.840618</td>\n",
              "      <td>-2.943548</td>\n",
              "      <td>-2.208002</td>\n",
              "      <td>1.058733</td>\n",
              "      <td>-1.632333</td>\n",
              "      <td>...</td>\n",
              "      <td>0.583276</td>\n",
              "      <td>-0.269209</td>\n",
              "      <td>-0.456108</td>\n",
              "      <td>-0.183659</td>\n",
              "      <td>-0.328168</td>\n",
              "      <td>0.606116</td>\n",
              "      <td>0.884876</td>\n",
              "      <td>-0.253700</td>\n",
              "      <td>245.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281674</th>\n",
              "      <td>170348.0</td>\n",
              "      <td>1.991976</td>\n",
              "      <td>0.158476</td>\n",
              "      <td>-2.583441</td>\n",
              "      <td>0.408670</td>\n",
              "      <td>1.151147</td>\n",
              "      <td>-0.096695</td>\n",
              "      <td>0.223050</td>\n",
              "      <td>-0.068384</td>\n",
              "      <td>0.577829</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.164350</td>\n",
              "      <td>-0.295135</td>\n",
              "      <td>-0.072173</td>\n",
              "      <td>-0.450261</td>\n",
              "      <td>0.313267</td>\n",
              "      <td>-0.289617</td>\n",
              "      <td>0.002988</td>\n",
              "      <td>-0.015309</td>\n",
              "      <td>42.53</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>492 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1309a911-099f-4ab8-9e37-09c635b504ab')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1309a911-099f-4ab8-9e37-09c635b504ab button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1309a911-099f-4ab8-9e37-09c635b504ab');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dfd90323-96fb-4395-90d0-a1e3eb17ba46\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dfd90323-96fb-4395-90d0-a1e3eb17ba46')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dfd90323-96fb-4395-90d0-a1e3eb17ba46 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_11a5157c-d6e9-48fe-b5fd-44a766e640bc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Fraud')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_11a5157c-d6e9-48fe-b5fd-44a766e640bc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Fraud');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Fraud"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##To check length of fraud and non fraud\n",
        "\n",
        "len(Fraud)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MWNKmFclC_sG",
        "outputId": "0b8ed663-1a88-4c95-cce6-01630fc2a51e"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "492"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(Non_Fraud)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ju4mRnMnDp7S",
        "outputId": "a11deb79-ad7d-4aff-aedf-56a5611db515"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "284315"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "DC3mHYtfDvfA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "###Relational plot using seaborn\n",
        "\n",
        "sns.relplot(x=\"Time\", y=\"Amount\", hue= \"Class\" ,data=DataFrame)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "PR4EXQH4D225",
        "outputId": "83fe3e0f-4ada-41c4-ecb2-ca1248a6193b"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7c00f5a6f650>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 558.875x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.catplot(x=\"Class\", y=\"Amount\", data=DataFrame)####The graph shows categry wise detection using category plot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "8J1NtjVOFWGb",
        "outputId": "06546b9a-499c-4a85-8e19-3665ab3f3435"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7c00f54b4850>"
            ]
          },
          "metadata": {},
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 511.111x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###We will be using logistic regression the train and test the model\n",
        "\n",
        "from sklearn import linear_model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "-xG7NioKFkLd"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X=DataFrame.iloc[:,:-1]\n",
        "Y= DataFrame['Class']"
      ],
      "metadata": {
        "id": "Bv13AJe0G-Ti"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)"
      ],
      "metadata": {
        "id": "SmDV5kRxICWA"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf= linear_model.LogisticRegression(C=1e5)"
      ],
      "metadata": {
        "id": "1ei0A0keILDC"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##Fit method to fit the model\n",
        "\n",
        "clf.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "QrLGLKllImTE",
        "outputId": "860e5bbd-32cf-459b-991d-2d2ee4061e0f"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=100000.0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=100000.0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=100000.0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##Now we will use predic method\n",
        "\n",
        "Y_Pred= clf.predict(X_test)"
      ],
      "metadata": {
        "id": "ono1BRDHIzwN"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##Confusison matrix\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score"
      ],
      "metadata": {
        "id": "NbjBieL0I_JZ"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##Print confusion matrix\n",
        "print (confusion_matrix(Y_test, Y_Pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeoGKr3DJl8P",
        "outputId": "7120fc96-4f77-456a-b62b-f773390fb9ad"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[85264    32]\n",
            " [   51    96]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Print accuracy score\n",
        "print (accuracy_score(Y_test, Y_Pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EzZ9Sy0JJwax",
        "outputId": "d8eebc96-f5ad-4439-d4cf-97bab2e145f3"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9990285921608558\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print classification report\n",
        "print (classification_report(Y_test, Y_Pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-E3uXFxJ3ED",
        "outputId": "6c2e438b-9bdd-4cf7-ed6d-aad5dbef01d7"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     85296\n",
            "           1       0.75      0.65      0.70       147\n",
            "\n",
            "    accuracy                           1.00     85443\n",
            "   macro avg       0.87      0.83      0.85     85443\n",
            "weighted avg       1.00      1.00      1.00     85443\n",
            "\n"
          ]
        }
      ]
    }
  ]
}